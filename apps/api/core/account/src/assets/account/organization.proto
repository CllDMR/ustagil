syntax = "proto3";

package account_organization;

service AccountOrganizationService {
  rpc ListAccountOrganizations(ListAccountOrganizationsRequest) 
  returns (ListAccountOrganizationsResponse) {}
  
  rpc GetAccountOrganization(GetAccountOrganizationRequest) 
  returns (AccountOrganization) {}
  
  rpc GetAccountOrganizationByEmail(GetAccountOrganizationByEmailRequest) 
  returns (AccountOrganization) {}
  
  rpc CreateAccountOrganization(CreateAccountOrganizationRequest) 
  returns (AccountOrganization) {}
  
  rpc UpdateAccountOrganization(UpdateAccountOrganizationRequest) 
  returns (AccountOrganization) {}
  
  rpc DeleteAccountOrganization(DeleteAccountOrganizationRequest) 
  returns (AccountOrganization) {}
}

enum Role {
  ROLE_UNSPECIFIED = 0;
  ROLE_ORGANIZATION = 1;
  ROLE_BASE = 2;
  ROLE_SUPER_ADMIN = 3;
  ROLE_USER = 4;
}

enum AccountKind {
  ACCOUNT_KIND_BASE = 0;
  ACCOUNT_KIND_ORGANIZATION = 1;
  ACCOUNT_KIND_SUPER_ADMIN = 2;
  ACCOUNT_KIND_USER = 3;
}

message AccountOrganization {
  string id = 1;
  AccountKind kind = 2;
  Role role = 3;
  string displayName = 4;
  string email = 5;
  string organization = 6;
  optional string password = 7;
}

message ListAccountOrganizationsRequest {
  optional int32 page_size = 1;
  optional string next_page_cursor = 2;
}

message ListAccountOrganizationsResponse {
  repeated AccountOrganization organizations = 1;
  string next_page_cursor = 2;
}

message GetAccountOrganizationRequest {
  string id = 1;
}

message GetAccountOrganizationByEmailRequest {
  string email = 1;
}

message CreateAccountOrganizationRequest {
  string id = 1;
  string displayName = 2;
  string email = 3;
  string organization = 4;
  string password = 5;
}

message UpdateAccountOrganizationRequest {
  string id = 1;
  optional string displayName = 2;
  optional string email = 3;
  optional string organization = 4;
}

message DeleteAccountOrganizationRequest {
  string id = 1;
}
